#!/usr/bin/env python3

import os
import subprocess
import sys
from ansible.parsing.utils.yaml import from_yaml
from argparse import ArgumentParser
import getpass  # For getting the OS user

# Argument parsing
parser = ArgumentParser()
parser.add_argument("--inventory", '-i', help='Ansible inventory file to use instead of the one defined in ansible.cfg')
parser.add_argument("--key-file", '-k', dest="keyfile", help='SSH private key file to use instead of the default for the user')
parser.add_argument("--user", '-u', '-l', dest="user", help='Override the user defined in Ansible inventory file')
parser.add_argument("--verbose", '-v', action="store_true", dest="verbose", default=False, help='Pass verbose flag to SSH command')
parser.add_argument("--become", '-b', action="store_true", dest="become", default=False, help='SSH as root instead of the inventory-supplied account')
parser.add_argument("host", nargs='?', help='The host to SSH into, if not provided, a list of available hosts in current inventory file is printed')
args = parser.parse_args()

inventory_args = []
ssh_args = ['ssh']
clean_inventory = ""
ssh_user = None

if args.inventory:
    inventory_args += ['-i', args.inventory]

if not args.host:
    print("You must specify one host to SSH into")
    try:
        hostlist = subprocess.check_output(['ansible', '--list-hosts', 'all'] + inventory_args).decode('utf-8')
        print(hostlist)
    except subprocess.CalledProcessError as e:
        print(f"Error listing hosts: {e}")
    sys.exit(1)

host = args.host
inventory_args += ['--yaml', '--host', host]

# Add key file and verbosity to SSH arguments
if args.keyfile:
    ssh_args += ['-i', args.keyfile]
if args.verbose:
    ssh_args += ['-v']

# Fetch inventory data
try:
    inventory = subprocess.check_output(['ansible-inventory'] + inventory_args).decode('utf-8')
except subprocess.CalledProcessError as e:
    print(f"Error fetching inventory: {e.output.decode('utf-8')}")
    sys.exit(1)

for line in inventory.splitlines():
    if not line.startswith("WARNING") and not line.startswith("deprecation_"):
        clean_inventory += line + '\n'

# Parse inventory
inv = from_yaml(clean_inventory)

# Determine SSH user
if 'ansible_user' in inv:
    ssh_user = inv['ansible_user']
if args.user:
    ssh_user = args.user
elif args.become:
    ssh_user = 'root'
else:
    # Fallback to OS user if not specified
    try:
        ssh_user = os.getlogin()
    except OSError:
        ssh_user = getpass.getuser()  # Fallback for non-interactive shells

# Default SSH key file
try:
    ansible_config = subprocess.check_output(['ansible-config', 'dump']).decode('utf-8')
    for line in ansible_config.splitlines():
        if 'DEFAULT_PRIVATE_KEY_FILE' in line and not line.endswith('None'):
            ssh_args += ['-i', line.split(' = ')[1]]
except subprocess.CalledProcessError as e:
    print(f"Error fetching Ansible config: {e}")
    sys.exit(1)

# Set host and user
if ssh_user:
    ssh_args += ['-l', ssh_user]

if 'ansible_host' in inv:
    ssh_host = inv['ansible_host']
else:
    ssh_host = host  # Use the host name if ansible_host is not defined

ssh_args.append(ssh_host)

# Execute SSH command
command = ' '.join(ssh_args)
print(f"Executing: {command}")
os.system(command)
